@startuml
title SmartHome API & Services.Part 3.TelematicSessionService. Component Diagram

top to bottom direction

!includeurl ../C4_Component.puml


System_Boundary(SmartHomeSystem, "SmartHome System") {
    System_Ext(ext_notify_systems, "ExtNotifySystems", "-sms\n- telegram\n- e-mail")

    Container(API_Gateway, "API Gateway", "nginx", "")

    Boundary(clientApps, "Client apps") {
        Container(MobileApp, "Mobile App", "Kotlin, Swift", "контроль и управление\n умным домом")
    }
    Boundary(telemetry, "telemetry") {
        ContainerQueue(MetricsQueue, "Metrics Queue", "kafka", "нормализованные метрики")
    }

   Boundary(services, "API services") {
       ContainerDb(MetaDB, "Meta Database", "PostgreSQL", "хранит пользователей, устройства, сценарии, платежи и др.\n(кроме телеметрии)")
       ContainerDb(UserCache, "User Cache", "Redis", "юзер-кэш метрик, устройств\n и др.данных")

       Container(TelematicSessionService, "TelematicSessionService", "Java, Spring", "- отправка телеметрии и данных юзерам"){
           Component(ApiControllerTele, "APIController", "Java, Spring",  "Обработка API запросов")
           Component(AlertsDispatcher, "AlertsDispatcher", "Java, Spring", "- логика алертов")
           Component(TelematicUpdateAggregator, "TelematicUpdateAggregator", "Java, Spring", "- подписка на новые метрики\n- нормализация и аггрегация по времени")
           Component(TelematicSessionManager, "TelematicSessionManager", "Java, Spring", "- управление сессиями\n webSocket")
           Component(RealtimeSessionStreamer, "RealtimeSessionStreamer", "Java, Spring", "- стриминг и обновление данных")
           Component(DataAggregator, "DataAggregator", "Java, Spring", "сбор данных")
           Component(ExtNotifier, "ExtNotifier", "Java, Spring", "сбор данных")
           Component(RepositoryLayerTele, "Repository Layer", "Java, Spring", "Data access logic")

           Rel(ApiControllerTele, TelematicSessionManager,"открыть/закрыть\n сессию")
           Rel(TelematicSessionManager, DataAggregator,"запрашивает\nслепок данных")
           Rel(TelematicSessionManager, RealtimeSessionStreamer,"- предоставляет сессию")
           Rel(RealtimeSessionStreamer, MobileApp,"передача через\nwebsocket")
           Rel(DataAggregator, RepositoryLayerTele,"сборка данных")
           Rel(RepositoryLayerTele, MetaDB,"read data")
           Rel(RepositoryLayerTele, UserCache,"read data")

           Rel(AlertsDispatcher, ExtNotifier,"алерты")
           Rel(AlertsDispatcher, "RealtimeSessionStreamer","алерты")

           Rel(MetricsQueue, TelematicUpdateAggregator,"новая телеметрия for user")
           Rel(TelematicUpdateAggregator, AlertsDispatcher,"рассчитать аллерты")
           Rel(TelematicUpdateAggregator, "DataAggregator","собрать данные")
           Rel("DataAggregator", "RealtimeSessionStreamer","updates for user")

           Rel(ExtNotifier, ext_notify_systems, "рассылка по каналам")
           Rel(API_Gateway, "ApiControllerTele","- открыть/закрыть сессию\n- обновить данные")
       }
    }


}











@enduml