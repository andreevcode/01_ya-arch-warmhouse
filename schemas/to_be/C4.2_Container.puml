@startuml
title SmartHome Container Diagram

top to bottom direction

!includeurl ../C4_Container.puml

Person_Ext(user, "User", "- добавление устройств\n- мониторинг датчиков\n- управление реле\n- создание сценариев\n- видеонаблюдение")
Person(manager, "Manager", "менеджмент устройств и ролей")
Person(operator, "Operator", "- поддержка\n- просмотр данных пользователей")

'внешние системы
System_Ext(bank, "Bank System", "External bank for processing payments")

System(SmartHome, "SmartHome System", "реализует все функции умного дома")

SystemDb_Ext(s3_tele, "S3", "Внешнее хранилище данных")

Container_Boundary(SmartHome, "SmartHome System") {
    System_Ext(relays, "Relays", "реле управления:\n- отопление\n- ворота\n- выключатели освещения\n - и др.")

        together {
            Boundary(clientApps, "Client apps") {
                Container(WebApp, "B2B Web App", "browser", "поддержка и добавление новых типов устройств")
                Container(MobileApp, "Mobile App", "Kotlin, Swift", "контроль и управление\n умным домом")
            }
        Container(API_Gateway, "API Gateway", "nginx", "")
                Container(lb1, "Load balancer", "http, websocket", "балансировка http, websocket")
        }

    Boundary(api_services, "API & services") {
        together{
            Container(SubscriptionsAndPayments, "Subscriptions and Payments", "Java, Spring", "подписки и платежи")
            Container(AuthService, "Auth service", "Java, Spring", "авторизация и аутентификация")
            Container(CommandsManager, "CommandsManager", "Java, Spring", "Регистрация/отправка команд")
            Container(ScenarioService, "Scenario Service", "Java, Spring", "обработка сценариев")
        }
        together{
                Container(VideoService, "Video Service", "Java, Spring", "Обработка видео")
                SystemDb_Ext(s3, "S3", "Внешнее хранилище данных")
        }
        Container(UserService, "User Service", "Java, Spring", "управление пользователями и ролями")
        Container(DeviceInventory, "Device Inventory", "Java, Spring", "менеджмент датчиков и реле")
        together{
                Container(TelematicSessionService, "TelematicSessionService", "Java, Spring", "- отправка телеметрии и данных юзерам")
                System_Ext(ext_notify_systems, "ExtNotifySystems", "-sms\n- telegram\n- e-mail")
        }
        ContainerDb(MetaDB, "Meta Database", "PostgreSQL", "**показаны связи только за пределами API & services**\n\nхранит пользователей, устройства, сценарии, платежи и др.\n(кроме телеметрии)")
        ContainerDb(UserCache, "User Cache", "Redis", "**показаны связи только за пределами API & services**\n\nюзер-кэш метрик, устройств\n и др.данных")
    }


    System_Ext(sensors, "Sensors", "любые 1P/3P датчики")
    Boundary(telemetry, "telemetry") {
        Container(lb2, Load Balancer, "mqtt", "балансировка mqtt")
        Container(TelematicMqttService, "TelematicMqttService", "Java, Spring", "нормализация и обработка телеметрии MQTT")
        Container(TelematicPollingService, "TelematicPollingService", "Java, Spring", "- polling датчиков без MQTT")
        ContainerDb(MetricsDB, "Metrics Database", "SQL/Timeseries", "метрики телеметрии")
        ContainerQueue(MetricsQueue, "Metrics Queue", "kafka", "нормализованные метрики")

         Rel(TelematicMqttService,MetricsQueue,"публикация")
         Rel(TelematicPollingService,MetricsQueue,"публикация")
         Rel(MetricsQueue,"TelematicSessionService","подписка")

         Rel(sensors, lb2,"отправка данных\nmqtt")
         Rel(lb2, TelematicMqttService,"балансировка")
         Rel(TelematicMqttService,"MetricsDB"," ")
         Rel(telemetry,"UserCache","обновление метрик\nв кэше")

         Rel(TelematicMqttService,s3_tele,"отправка в холодное хранилище")
    }
}


'------------- СВЯЗИ -------------
'users
Rel(user, MobileApp, "Uses the system")
Rel(operator, WebApp,"Uses the system")
Rel(manager, WebApp,"Uses the system")

'перед API Gateway
Rel(WebApp, lb1,"rest")
Rel(MobileApp, lb1,"rest")
Rel(lb1, API_Gateway,"балансировка")

'от API Gateway
Rel(API_Gateway, "AuthService", "авторизация\n аутентификация")
Rel(AuthService, SubscriptionsAndPayments,"проверка базовой подписки")
Rel(API_Gateway, ScenarioService,"scenario\n requests")
Rel(API_Gateway, CommandsManager,"команды\n пользователя")
Rel(API_Gateway, "DeviceInventory","добавление/удаление\n устройств")
Rel(API_Gateway, "UserService","users & roles")
Rel(API_Gateway, TelematicSessionService, "обновление данных")
Rel(API_Gateway, VideoService, "поиск видео")
Rel(API_Gateway, SubscriptionsAndPayments, "подписки")

'TelematicSessionService
Rel(TelematicSessionService, MobileApp, "websocket")
Rel(TelematicSessionService, MetricsDB, чтение\nметрик)
Rel(TelematicSessionService, ext_notify_systems, "уведомления")

'TelematicPollingService
Rel(TelematicPollingService, sensors, "rest polling,\nесли нет mqtt")
Rel(TelematicPollingService, MetricsDB, " ")

'команды
Rel(CommandsManager,SubscriptionsAndPayments,"проверка доступности\nв подписке")
Rel("ScenarioService",CommandsManager,"сценарные\n команды")
Rel("CommandsManager",relays,"отправка команд")

'SubscriptionService
Rel(DeviceInventory,SubscriptionsAndPayments,"проверка кол-ва устройств\nв подписке")
Rel(SubscriptionsAndPayments,bank,"Processes payments")

'Ext
Rel(VideoService,s3,"reads/writes")
Rel(VideoService, MobileApp,"просмотр видео")

Rel(TelematicPollingService, DeviceInventory,"датчики для polling")


@enduml