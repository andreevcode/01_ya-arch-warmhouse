@startuml
title SmartHome Telemetry. Component Diagram

top to bottom direction

!includeurl ../C4_Component.puml

SystemDb_Ext(s3, "S3", "Внешнее хранилище данных")


System_Boundary(SmartHomeSystem, "SmartHome System") {
    ContainerDb(UserCache, "User Cache", "Redis", "юзер-кэш метрик, устройств\n и др.данных")
    Container(DeviceInventory, "Device Inventory", "Java, Spring", "менеджмент датчиков и реле")
    System_Ext(sensors2, "Sensors", "любые mqtt 1P/3P датчики")

    Boundary(telemetry, "Telemetry") {
        Container(lb2, "Load balancer", "mqtt", "балансировка mqtt")
        Container(MQTT_broker, "MQTT Broker", "", "Pub/sub точка входа MQTT")
        ContainerDb(MetricsDB, "Metrics Database", "SQL/Timeseries", "метрики телеметрии")
        System_Ext(sensors, "Sensors", "любые polling 1P/3P датчики")

        Container(TelematicPollingService, "TelematicPollingService", "Java, Spring", "обработка телеметрии"){
          Component(TelePollingController, "TelePollingController", "Java, Spring",  "Опрос датчиков")
          Component(RepositoryLayerPolling, "Repository Layer", "Java, Spring", "Data access logic")
          Component(MetricsNormalizer2, "MetricsNormalizer", "Java, Spring", "нормализация метрик")
          Component(StorageSaver2, "StorageSaver2", "Java, Spring",  "сохранение в хранилище")
          Component(RegularPollingManager, "RegularPollingManager", "Java, Spring",  "Организация регулярного опроса датчиков")
          Component(RotationJobManager2, "RotationJobManager", "Java, Spring", "ротация метрик в холодное хранилище")

          Rel(RepositoryLayerPolling, MetricsDB, сохранение\nметрик)
          Rel(RepositoryLayerPolling, UserCache, "обновление метрик\nв кэше")
          Rel(TelePollingController, sensors, "обновление метрик\nв кэше")
          Rel(RegularPollingManager, DeviceInventory, "получить датчики")
          Rel(RegularPollingManager, StorageSaver2, "сохранить метрики")
          Rel(StorageSaver2, RepositoryLayerPolling, "CRUD")
          Rel(RegularPollingManager, TelePollingController, "получить датчики")

          Rel(RegularPollingManager, MetricsNormalizer2, "нормализация")

          Rel(RotationJobManager2, RepositoryLayerPolling, "удаление старых метрик")
          Rel(RotationJobManager2, s3, "ротация старых метрик")
        }

        Container(TelematicMqttService, "TelematicMqttService", "Java, Spring", "обработка телеметрии"){
            Component(MetricsHandler, "MetricsHandler", "Java, Spring", "разбор входных метрик")
            Component(MetricsNormalizer, "MetricsNormalizer", "Java, Spring", "нормализация метрик")
            Component(StorageSaver, "StorageSaver", "Java, Spring", "сохранение в хранилище")
            Component(RotationJobManager, "RotationJobManager", "Java, Spring", "ротация метрик в холодное хранилище")
            Component(RepositoryLayer, "Repository Layer", "Java, Spring", "Data access logic")

            Rel(lb2, MQTT_broker, балансировка)
            Rel(MQTT_broker, MetricsHandler, "Чтение топиков")
            Rel(MetricsHandler, MetricsNormalizer, "нормализация")
            Rel(MetricsHandler, StorageSaver, "логика сохранения/обновления значений в базе")
            Rel(StorageSaver, RepositoryLayer, "CRUD")
            Rel(RepositoryLayer, MetricsDB, сохранение\nметрик)
            Rel(RepositoryLayer, UserCache, "обновление метрик\nв кэше")

            Rel(RotationJobManager, RepositoryLayer, "удаление старых метрик")
            Rel(RotationJobManager, s3, "ротация старых метрик")
            Rel(sensors2, lb2, "отправка метрик")
        }

    }
}

@enduml